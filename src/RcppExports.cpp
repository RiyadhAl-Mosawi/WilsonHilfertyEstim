// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pdf
double pdf(double x, Rcpp::NumericVector para);
RcppExport SEXP _EstimWHD_pdf(SEXP xSEXP, SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(pdf(x, para));
    return rcpp_result_gen;
END_RCPP
}
// cdf
double cdf(double x, Rcpp::NumericVector para);
RcppExport SEXP _EstimWHD_cdf(SEXP xSEXP, SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(cdf(x, para));
    return rcpp_result_gen;
END_RCPP
}
// sur
double sur(double x, Rcpp::NumericVector para);
RcppExport SEXP _EstimWHD_sur(SEXP xSEXP, SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(sur(x, para));
    return rcpp_result_gen;
END_RCPP
}
// quan
double quan(Rcpp::NumericVector init, double p, Rcpp::NumericVector para);
RcppExport SEXP _EstimWHD_quan(SEXP initSEXP, SEXP pSEXP, SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(quan(init, p, para));
    return rcpp_result_gen;
END_RCPP
}
// cpc_fun
double cpc_fun(Rcpp::NumericVector para, double L, double U, double P0);
RcppExport SEXP _EstimWHD_cpc_fun(SEXP paraSEXP, SEXP LSEXP, SEXP USEXP, SEXP P0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type P0(P0SEXP);
    rcpp_result_gen = Rcpp::wrap(cpc_fun(para, L, U, P0));
    return rcpp_result_gen;
END_RCPP
}
// cpc_grad
Rcpp::NumericVector cpc_grad(Rcpp::NumericVector para, double L, double U, double P0);
RcppExport SEXP _EstimWHD_cpc_grad(SEXP paraSEXP, SEXP LSEXP, SEXP USEXP, SEXP P0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type P0(P0SEXP);
    rcpp_result_gen = Rcpp::wrap(cpc_grad(para, L, U, P0));
    return rcpp_result_gen;
END_RCPP
}
// GenDataRcpp
Rcpp::NumericVector GenDataRcpp(Rcpp::NumericVector init, Rcpp::NumericVector para, Rcpp::NumericVector R, int k);
RcppExport SEXP _EstimWHD_GenDataRcpp(SEXP initSEXP, SEXP paraSEXP, SEXP RSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(GenDataRcpp(init, para, R, k));
    return rcpp_result_gen;
END_RCPP
}
// loglike
double loglike(Rcpp::NumericVector para, Rcpp::NumericVector X, Rcpp::NumericVector R, int k);
RcppExport SEXP _EstimWHD_loglike(SEXP paraSEXP, SEXP XSEXP, SEXP RSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike(para, X, R, k));
    return rcpp_result_gen;
END_RCPP
}
// logMPS
double logMPS(Rcpp::NumericVector para, Rcpp::NumericVector X, Rcpp::NumericVector R, int k);
RcppExport SEXP _EstimWHD_logMPS(SEXP paraSEXP, SEXP XSEXP, SEXP RSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(logMPS(para, X, R, k));
    return rcpp_result_gen;
END_RCPP
}
// prior
double prior(Rcpp::NumericVector para);
RcppExport SEXP _EstimWHD_prior(SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(prior(para));
    return rcpp_result_gen;
END_RCPP
}
// Estim
Rcpp::List Estim(arma::vec para, arma::vec X, arma::vec R, double L, double U, double P0, int k, std::string type);
RcppExport SEXP _EstimWHD_Estim(SEXP paraSEXP, SEXP XSEXP, SEXP RSEXP, SEXP LSEXP, SEXP USEXP, SEXP P0SEXP, SEXP kSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type para(paraSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type P0(P0SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Estim(para, X, R, L, U, P0, k, type));
    return rcpp_result_gen;
END_RCPP
}
// TK
Rcpp::List TK(arma::vec para, arma::vec X, arma::vec R, double q, double c, double L, double U, double P0, int k, std::string type);
RcppExport SEXP _EstimWHD_TK(SEXP paraSEXP, SEXP XSEXP, SEXP RSEXP, SEXP qSEXP, SEXP cSEXP, SEXP LSEXP, SEXP USEXP, SEXP P0SEXP, SEXP kSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type para(paraSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type P0(P0SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(TK(para, X, R, q, c, L, U, P0, k, type));
    return rcpp_result_gen;
END_RCPP
}
// MH_sample
Rcpp::List MH_sample(std::string type, NumericVector para, NumericVector se, NumericVector R, NumericVector X, int k, double L, double U, double P0, int MC_size, int MC_burn, double q, double c, int verbose, bool display_progress);
RcppExport SEXP _EstimWHD_MH_sample(SEXP typeSEXP, SEXP paraSEXP, SEXP seSEXP, SEXP RSEXP, SEXP XSEXP, SEXP kSEXP, SEXP LSEXP, SEXP USEXP, SEXP P0SEXP, SEXP MC_sizeSEXP, SEXP MC_burnSEXP, SEXP qSEXP, SEXP cSEXP, SEXP verboseSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type P0(P0SEXP);
    Rcpp::traits::input_parameter< int >::type MC_size(MC_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type MC_burn(MC_burnSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(MH_sample(type, para, se, R, X, k, L, U, P0, MC_size, MC_burn, q, c, verbose, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EstimWHD_pdf", (DL_FUNC) &_EstimWHD_pdf, 2},
    {"_EstimWHD_cdf", (DL_FUNC) &_EstimWHD_cdf, 2},
    {"_EstimWHD_sur", (DL_FUNC) &_EstimWHD_sur, 2},
    {"_EstimWHD_quan", (DL_FUNC) &_EstimWHD_quan, 3},
    {"_EstimWHD_cpc_fun", (DL_FUNC) &_EstimWHD_cpc_fun, 4},
    {"_EstimWHD_cpc_grad", (DL_FUNC) &_EstimWHD_cpc_grad, 4},
    {"_EstimWHD_GenDataRcpp", (DL_FUNC) &_EstimWHD_GenDataRcpp, 4},
    {"_EstimWHD_loglike", (DL_FUNC) &_EstimWHD_loglike, 4},
    {"_EstimWHD_logMPS", (DL_FUNC) &_EstimWHD_logMPS, 4},
    {"_EstimWHD_prior", (DL_FUNC) &_EstimWHD_prior, 1},
    {"_EstimWHD_Estim", (DL_FUNC) &_EstimWHD_Estim, 8},
    {"_EstimWHD_TK", (DL_FUNC) &_EstimWHD_TK, 10},
    {"_EstimWHD_MH_sample", (DL_FUNC) &_EstimWHD_MH_sample, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_EstimWHD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
